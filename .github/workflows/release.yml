name: Release Binaries (Multi-Target)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name for release (e.g. v1.2.3)'
        required: true

permissions:
  contents: write

jobs:
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_tag.outputs.TAG_NAME }}
    steps:
      - name: Get Tag Name
        id: get_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TAG_NAME=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.TAG_NAME }}
          name: Release ${{ steps.get_tag.outputs.TAG_NAME }}
          body: |
            Automated multi-target release for tag ${{ steps.get_tag.outputs.TAG_NAME }}.
            Binaries attached below.
          draft: false
          prerelease: false

  build_binaries:
    name: Build for ${{ matrix.os }} (${{ matrix.target }})
    needs: create_release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name_suffix: linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name_suffix: windows-x86_64
            binary_ext: .exe
          - os: macos-latest
            target: x86_64-apple-darwin
            name_suffix: apple-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name_suffix: apple-arm64

    runs-on: ${{ matrix.os }}
    env:
      BINARY_NAME: yuanbao-chat2api

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust toolchain (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (if necessary)
        if: matrix.cross_compile_setup != ''
        run: ${{ matrix.cross_compile_setup }}
        shell: bash

      - name: Cache Cargo registry and index
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-cargo-${{ matrix.target }}-
            ${{ matrix.os }}-cargo-

      - name: Build release binary (${{ matrix.target }})
        run: ${{ matrix.linker_env }} cargo build --verbose --release --target ${{ matrix.target }}
        shell: bash
        env:
          PKG_CONFIG_ALLOW_CROSS: 1

      - name: Prepare Release Asset Info
        id: prepare_asset
        env:
          MATRIX_BINARY_EXT: ${{ matrix.binary_ext }}
        run: |
          echo "Job level BINARY_NAME: $BINARY_NAME"
          echo "Step level MATRIX_BINARY_EXT: $MATRIX_BINARY_EXT"
          TAG_NAME="${{ needs.create_release.outputs.tag_name }}"
          BIN_NAME="${BINARY_NAME}${MATRIX_BINARY_EXT}"
          ASSET_NAME="${BINARY_NAME}-${TAG_NAME}-${{ matrix.name_suffix }}${MATRIX_BINARY_EXT}"

          if [ -z "$BINARY_NAME" ]; then
            echo "Error: BINARY_NAME is empty"
            exit 1
          fi

          if [ -z "$BIN_NAME" ]; then
            echo "Error: BIN_NAME is empty"
            exit 1
          fi

          ASSET_PATH="./target/${{ matrix.target }}/release/${BIN_NAME}"
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "ASSET_PATH=${ASSET_PATH}" >> $GITHUB_OUTPUT
          echo "ASSET_NAME=${ASSET_NAME}" >> $GITHUB_OUTPUT

          if [ ! -f "${ASSET_PATH}" ]; then
            echo "Error: Binary not found at ${ASSET_PATH}"
            ls -lha ./target/${{ matrix.target }}/release/
            exit 1
          fi
        shell: bash

      - name: Upload Release Asset (${{ matrix.name_suffix }})
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ steps.prepare_asset.outputs.ASSET_PATH }}
          asset_name: ${{ steps.prepare_asset.outputs.ASSET_NAME }}
          asset_content_type: application/octet-stream
